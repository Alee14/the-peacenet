/* * Project: Plex *  * Copyright (c) 2017 Watercolor Games. All rights reserved. For internal use only. *  *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE * SOFTWARE. */using Newtonsoft.Json;using Plex.Objects.ShiftFS;using System;using System.Collections.Generic;using System.IO;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Plex.Engine{    //define a whole bunch of things that are needed     public interface ILanguageProvider    {        List<string> GetJSONTranscripts();        void WriteDefaultTranscript();        void WriteTranscript();        string GetCurrentTranscript();        string[] GetAllLanguages();    }    public static class Localization    {        private static ILanguageProvider _provider = null;        private static string _languageid = null;        public static string[] GetAllLanguages()        {            if(_provider == null)            {                return JsonConvert.DeserializeObject<string[]>(Properties.Resources.languages); //collect all the languages availible            }            else            {                return _provider.GetAllLanguages(); //also collect all the languages avalible but from a specific provider this time            }        }        //if no local selected, english will be loaded        public static void SetupTHETRUEDefaultLocals()        {            if (_provider == null)            {                var lines = Properties.Resources.strings_en;                var path = "english.local";                Utils.WriteAllText(Paths.GetPath(path), lines);            }            else            {                _provider.WriteTranscript();            }        }        // ignore this not really setup of default no no zone        public static void SetupDefaultLocals(string lines, string path)        {            Utils.WriteAllText(Paths.GetPath(path), lines);        }        // Takes in a string and parses localization blocks into text blocks in the current language.        // example: "{Experience}: 0" will come out as "Experience: 0" if the current language is english        public static string Parse(string original)        {            return Parse(original, new Dictionary<string, string>());        }        private static Dictionary<string, string> localizationStrings = null;        public static string Parse(string original, Dictionary<string, string> replace)        {            try            {                if(localizationStrings == null)                    try                    {                        localizationStrings = JsonConvert.DeserializeObject<Dictionary<string, string>>(_provider.GetCurrentTranscript());                    }                    catch                    {                        localizationStrings = JsonConvert.DeserializeObject<Dictionary<string, string>>(Utils.ReadAllText(Paths.GetPath("english.local"))); //if no provider fall back to english                    }                foreach (var kv in localizationStrings.Where(x => original.Contains(x.Key)))                {                    original = original.Replace(kv.Key, kv.Value); // goes through and replaces all the localization blocks                }                //string original2 = Parse(original);                string usernameReplace = "";                string domainReplace = "";

                // actually do the replacement                foreach (KeyValuePair<string, string> replacement in replace.Where(x => original.Contains(x.Key)))                {                    original = original.Replace(replacement.Key, Parse(replacement.Value));                }                return original; // returns the now replaced string            }            catch            {                return original;            }        }        // a few things are defined here        public static void RegisterProvider(ILanguageProvider p)        {            _provider = p;        }        public static void SetLanguageID(string id)        {            _languageid = id;        }        public static string GetLanguageID()        {            return _languageid;        }    }}