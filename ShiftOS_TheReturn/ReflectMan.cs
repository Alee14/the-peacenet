/* * Project: Plex *  * Copyright (c) 2017 Watercolor Games. All rights reserved. For internal use only. *  *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE * SOFTWARE. */using Microsoft.Scripting.Hosting;using System;using System.Collections.Generic;using System.Linq;using System.Reflection;using System.Text;using System.Threading.Tasks;namespace Plex.Engine{    /// <summary>    /// Mirror, mirror on the wall. Manages a list of types found in Plex-related assemblies.    /// </summary>    public static class ReflectMan    {        private static Assembly[] asms = null;        /// <summary>        /// The list of found assemblies.        /// </summary>        public static Assembly[] Asms        {            get            {                if (asms == null)                    LoadFiles();                return asms;            }        }        private static Type[] types = null;        /// <summary>        /// The list of found types.        /// </summary>        public static Type[] Types        {            get            {                if (types == null)                {                    FindTypes();                    PythonAPI.Scan();                }                return types;            }        }        private static void LoadFiles()        {            var ret = new List<Assembly>();            foreach (var exe in Array.FindAll(System.IO.Directory.GetFiles(Environment.CurrentDirectory), n => n.EndsWith(".exe", true, null) || n.EndsWith(".dll", true, null)))                try                {                    var asm = Assembly.LoadFile(exe);                    if (asm.GetReferencedAssemblies().Contains("Plex.Engine") || asm.FullName.Contains("Plex.Engine"))                        ret.Add(asm);                }                catch { } // probably not a managed assembly            asms = ret.ToArray();        }        private static void FindTypes()        {            var ret = new List<Type>();            foreach (var asm in Asms)                ret.AddRange(asm.GetTypes());            types = ret.ToArray();        }        /// <summary>        /// Add extra types to the ReflectMan array after the scan is complete.        /// Shouldn't be public, but C# doesn't support "friend".        /// </summary>        /// <param name="newtypes">An array of types to append.</param>        public static void AddTypes(Type[] newtypes)        {            var oldlength = types.Length;            Array.Resize(ref types, oldlength + newtypes.Length);            newtypes.CopyTo(types, oldlength);        }    }#if DEBUG    public static class ReflectDebug    {        [Command("listalltypes", description = "List all types that were found by ReflectMan. Only present in DEBUG builds of Plex.")]        public static bool ListAllTypes(Dictionary<string, object> args)        {            foreach (var type in ReflectMan.Types)                Console.WriteLine(type.ToString());            return true;        }    }#endif}