/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_PlexNative(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_PlexNative(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_PlexNative(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_None_get() {
  void * jresult ;
  int32_t result;
  
  result = (int32_t)WrapMode::None;
  jresult = new int32_t((const int32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Letters_get() {
  void * jresult ;
  int32_t result;
  
  result = (int32_t)WrapMode::Letters;
  jresult = new int32_t((const int32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Words_get() {
  void * jresult ;
  int32_t result;
  
  result = (int32_t)WrapMode::Words;
  jresult = new int32_t((const int32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Regular_get() {
  void * jresult ;
  int32_t result;
  
  result = (int32_t)Styles::Regular;
  jresult = new int32_t((const int32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Bold_get() {
  void * jresult ;
  int32_t result;
  
  result = (int32_t)Styles::Bold;
  jresult = new int32_t((const int32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Italic_get() {
  void * jresult ;
  int32_t result;
  
  result = (int32_t)Styles::Italic;
  jresult = new int32_t((const int32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Underline_get() {
  void * jresult ;
  int32_t result;
  
  result = (int32_t)Styles::Underline;
  jresult = new int32_t((const int32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Strikeout_get() {
  void * jresult ;
  int32_t result;
  
  result = (int32_t)Styles::Strikeout;
  jresult = new int32_t((const int32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TopLeft_get() {
  void * jresult ;
  int32_t result;
  
  result = (int32_t)Alignment::TopLeft;
  jresult = new int32_t((const int32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Top_get() {
  void * jresult ;
  int32_t result;
  
  result = (int32_t)Alignment::Top;
  jresult = new int32_t((const int32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TopRight_get() {
  void * jresult ;
  int32_t result;
  
  result = (int32_t)Alignment::TopRight;
  jresult = new int32_t((const int32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Left_get() {
  void * jresult ;
  int32_t result;
  
  result = (int32_t)Alignment::Left;
  jresult = new int32_t((const int32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Middle_get() {
  void * jresult ;
  int32_t result;
  
  result = (int32_t)Alignment::Middle;
  jresult = new int32_t((const int32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Right_get() {
  void * jresult ;
  int32_t result;
  
  result = (int32_t)Alignment::Right;
  jresult = new int32_t((const int32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BottomLeft_get() {
  void * jresult ;
  int32_t result;
  
  result = (int32_t)Alignment::BottomLeft;
  jresult = new int32_t((const int32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Bottom_get() {
  void * jresult ;
  int32_t result;
  
  result = (int32_t)Alignment::Bottom;
  jresult = new int32_t((const int32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BottomRight_get() {
  void * jresult ;
  int32_t result;
  
  result = (int32_t)Alignment::BottomRight;
  jresult = new int32_t((const int32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeasureString(char * jarg1, void * jarg2, char * jarg3, void * jarg4, double jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int32_t arg2 ;
  char *arg3 = (char *) 0 ;
  int32_t arg4 ;
  double arg5 ;
  int32_t arg6 ;
  int32_t arg7 ;
  int32_t arg8 ;
  int32_t arg9 ;
  int32_t *argp2 ;
  int32_t *argp4 ;
  int32_t *argp6 ;
  int32_t *argp7 ;
  int32_t *argp8 ;
  int32_t *argp9 ;
  int64_t result;
  
  arg1 = (char *)jarg1; 
  argp2 = (int32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (char *)jarg3; 
  argp4 = (int32_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32_t", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (double)jarg5; 
  argp6 = (int32_t *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32_t", 0);
    return 0;
  }
  arg6 = *argp6; 
  argp7 = (int32_t *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32_t", 0);
    return 0;
  }
  arg7 = *argp7; 
  argp8 = (int32_t *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32_t", 0);
    return 0;
  }
  arg8 = *argp8; 
  argp9 = (int32_t *)jarg9; 
  if (!argp9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32_t", 0);
    return 0;
  }
  arg9 = *argp9; 
  result = MeasureString(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = new int64_t((const int64_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DrawString(char * jarg1, void * jarg2, char * jarg3, void * jarg4, double jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, double jarg10, double jarg11, double jarg12, double jarg13, void * jarg14, void * jarg15, void * jarg16) {
  char *arg1 = (char *) 0 ;
  int32_t arg2 ;
  char *arg3 = (char *) 0 ;
  int32_t arg4 ;
  double arg5 ;
  int32_t arg6 ;
  int32_t arg7 ;
  int32_t arg8 ;
  int32_t arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  double arg13 ;
  int32_t arg14 ;
  int32_t arg15 ;
  unsigned char *arg16 = (unsigned char *) 0 ;
  int32_t *argp2 ;
  int32_t *argp4 ;
  int32_t *argp6 ;
  int32_t *argp7 ;
  int32_t *argp8 ;
  int32_t *argp9 ;
  int32_t *argp14 ;
  int32_t *argp15 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (int32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (char *)jarg3; 
  argp4 = (int32_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32_t", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (double)jarg5; 
  argp6 = (int32_t *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32_t", 0);
    return ;
  }
  arg6 = *argp6; 
  argp7 = (int32_t *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32_t", 0);
    return ;
  }
  arg7 = *argp7; 
  argp8 = (int32_t *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32_t", 0);
    return ;
  }
  arg8 = *argp8; 
  argp9 = (int32_t *)jarg9; 
  if (!argp9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32_t", 0);
    return ;
  }
  arg9 = *argp9; 
  arg10 = (double)jarg10; 
  arg11 = (double)jarg11; 
  arg12 = (double)jarg12; 
  arg13 = (double)jarg13; 
  argp14 = (int32_t *)jarg14; 
  if (!argp14) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32_t", 0);
    return ;
  }
  arg14 = *argp14; 
  argp15 = (int32_t *)jarg15; 
  if (!argp15) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int32_t", 0);
    return ;
  }
  arg15 = *argp15; 
  arg16 = (unsigned char *)jarg16; 
  DrawString(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
}


#ifdef __cplusplus
}
#endif

