//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


class PlexNativePINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("PlexNative", EntryPoint="SWIGRegisterExceptionCallbacks_PlexNative")]
    public static extern void SWIGRegisterExceptionCallbacks_PlexNative(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("PlexNative", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_PlexNative")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_PlexNative(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_PlexNative(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_PlexNative(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(PlexNativePINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(PlexNativePINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("PlexNative", EntryPoint="SWIGRegisterStringCallback_PlexNative")]
    public static extern void SWIGRegisterStringCallback_PlexNative(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_PlexNative(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static PlexNativePINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("PlexNative", EntryPoint="CSharp_None_get")]
  public static extern global::System.IntPtr None_get();

  [global::System.Runtime.InteropServices.DllImport("PlexNative", EntryPoint="CSharp_Letters_get")]
  public static extern global::System.IntPtr Letters_get();

  [global::System.Runtime.InteropServices.DllImport("PlexNative", EntryPoint="CSharp_Words_get")]
  public static extern global::System.IntPtr Words_get();

  [global::System.Runtime.InteropServices.DllImport("PlexNative", EntryPoint="CSharp_Regular_get")]
  public static extern global::System.IntPtr Regular_get();

  [global::System.Runtime.InteropServices.DllImport("PlexNative", EntryPoint="CSharp_Bold_get")]
  public static extern global::System.IntPtr Bold_get();

  [global::System.Runtime.InteropServices.DllImport("PlexNative", EntryPoint="CSharp_Italic_get")]
  public static extern global::System.IntPtr Italic_get();

  [global::System.Runtime.InteropServices.DllImport("PlexNative", EntryPoint="CSharp_Underline_get")]
  public static extern global::System.IntPtr Underline_get();

  [global::System.Runtime.InteropServices.DllImport("PlexNative", EntryPoint="CSharp_Strikeout_get")]
  public static extern global::System.IntPtr Strikeout_get();

  [global::System.Runtime.InteropServices.DllImport("PlexNative", EntryPoint="CSharp_TopLeft_get")]
  public static extern global::System.IntPtr TopLeft_get();

  [global::System.Runtime.InteropServices.DllImport("PlexNative", EntryPoint="CSharp_Top_get")]
  public static extern global::System.IntPtr Top_get();

  [global::System.Runtime.InteropServices.DllImport("PlexNative", EntryPoint="CSharp_TopRight_get")]
  public static extern global::System.IntPtr TopRight_get();

  [global::System.Runtime.InteropServices.DllImport("PlexNative", EntryPoint="CSharp_Left_get")]
  public static extern global::System.IntPtr Left_get();

  [global::System.Runtime.InteropServices.DllImport("PlexNative", EntryPoint="CSharp_Middle_get")]
  public static extern global::System.IntPtr Middle_get();

  [global::System.Runtime.InteropServices.DllImport("PlexNative", EntryPoint="CSharp_Right_get")]
  public static extern global::System.IntPtr Right_get();

  [global::System.Runtime.InteropServices.DllImport("PlexNative", EntryPoint="CSharp_BottomLeft_get")]
  public static extern global::System.IntPtr BottomLeft_get();

  [global::System.Runtime.InteropServices.DllImport("PlexNative", EntryPoint="CSharp_Bottom_get")]
  public static extern global::System.IntPtr Bottom_get();

  [global::System.Runtime.InteropServices.DllImport("PlexNative", EntryPoint="CSharp_BottomRight_get")]
  public static extern global::System.IntPtr BottomRight_get();

  [global::System.Runtime.InteropServices.DllImport("PlexNative", EntryPoint="CSharp_MeasureString")]
  public static extern global::System.IntPtr MeasureString(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, double jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, global::System.Runtime.InteropServices.HandleRef jarg8, global::System.Runtime.InteropServices.HandleRef jarg9);

  [global::System.Runtime.InteropServices.DllImport("PlexNative", EntryPoint="CSharp_DrawString")]
  public static extern void DrawString(string jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, double jarg5, global::System.Runtime.InteropServices.HandleRef jarg6, global::System.Runtime.InteropServices.HandleRef jarg7, global::System.Runtime.InteropServices.HandleRef jarg8, global::System.Runtime.InteropServices.HandleRef jarg9, double jarg10, double jarg11, double jarg12, double jarg13, global::System.Runtime.InteropServices.HandleRef jarg14, global::System.Runtime.InteropServices.HandleRef jarg15, global::System.Runtime.InteropServices.HandleRef jarg16);
}
