//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Plex.Frontend.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Plex.Frontend.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///	Name: &quot;Cowsay Banana Cowfile&quot;,
        ///	Description: &quot;It&apos;s fun to play with food. Especially in the form of a cowfile. This install file adds a Banana to Cowsay&apos;s cowfile list. To use it, simply do \&quot;cowsay --id Hello --file banana\&quot;.&quot;,
        ///	SourceType: &quot;CowFile&quot;,
        ///	Source: &quot;banana\t\&quot;-..___     __.=&apos;&gt;\r\n`.     \&quot;\&quot;\&quot;\&quot;\&quot;   ,&apos;\r\n  \&quot;-..__   _.-\&quot;\r\n        \&quot;\&quot;\&quot;&quot;
        ///}.
        /// </summary>
        internal static string banana_cow_stp {
            get {
                return ResourceManager.GetString("banana_cow_stp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [u][h1]Credits[/h1][/u]
        ///
        ///We need to put the names of any people who work on this game in here. We also need to put the names and sources of any third party libraries we use (such as monogame, CodeKicker.BBCode, JSON.NET etc).
        ///
        ///You can format this file using BBCode (Plexnet-flavoured) as it will render using the BBCode label control.
        ///
        ///BBCode example:
        ///
        ///[h1]This is a top-level heading[/h1]
        ///[h2]This is a second-level heading[/h2]
        ///[h3]This is a third-level heading[/h3]
        ///
        ///You can have [b]bold[/b], [i]i [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Credits {
            get {
                return ResourceManager.GetString("Credits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap cursor_9x_pointer {
            get {
                object obj = ResourceManager.GetObject("cursor_9x_pointer", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* Plex Exploits data file
        /// *
        /// * This file contains information about all exploits in the game&apos;s campaign.
        /// *
        /// */
        ///
        ///[
        ///	{
        ///		FriendlyName: &quot;FTP Exploit&quot;,
        ///		ExploitName: &quot;ftpwn&quot;,
        ///		EffectiveAgainstPort: &quot;FileServer&quot;,
        ///	},
        ///	{
        ///		FriendlyName: &quot;SSH Exploit&quot;,
        ///		ExploitName: &quot;sshardline&quot;,
        ///		EffectiveAgainstPort: &quot;SSHServer&quot;,
        ///		Dependencies: &quot;sploitset_sshardline&quot;,
        ///	}
        ///].
        /// </summary>
        internal static string Exploits {
            get {
                return ResourceManager.GetString("Exploits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap fileicon0 {
            get {
                object obj = ResourceManager.GetObject("fileicon0", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap fileicon1 {
            get {
                object obj = ResourceManager.GetObject("fileicon1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap fileicon10 {
            get {
                object obj = ResourceManager.GetObject("fileicon10", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap fileicon11 {
            get {
                object obj = ResourceManager.GetObject("fileicon11", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap fileicon12 {
            get {
                object obj = ResourceManager.GetObject("fileicon12", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap fileicon13 {
            get {
                object obj = ResourceManager.GetObject("fileicon13", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap fileicon14 {
            get {
                object obj = ResourceManager.GetObject("fileicon14", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap fileicon15 {
            get {
                object obj = ResourceManager.GetObject("fileicon15", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap fileicon16 {
            get {
                object obj = ResourceManager.GetObject("fileicon16", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap fileicon17 {
            get {
                object obj = ResourceManager.GetObject("fileicon17", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap fileicon18 {
            get {
                object obj = ResourceManager.GetObject("fileicon18", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap fileicon19 {
            get {
                object obj = ResourceManager.GetObject("fileicon19", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap fileicon2 {
            get {
                object obj = ResourceManager.GetObject("fileicon2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap fileicon3 {
            get {
                object obj = ResourceManager.GetObject("fileicon3", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap fileicon4 {
            get {
                object obj = ResourceManager.GetObject("fileicon4", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap fileicon5 {
            get {
                object obj = ResourceManager.GetObject("fileicon5", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap fileicon6 {
            get {
                object obj = ResourceManager.GetObject("fileicon6", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap fileicon7 {
            get {
                object obj = ResourceManager.GetObject("fileicon7", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap fileicon8 {
            get {
                object obj = ResourceManager.GetObject("fileicon8", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap fileicon9 {
            get {
                object obj = ResourceManager.GetObject("fileicon9", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap fileiconcf {
            get {
                object obj = ResourceManager.GetObject("fileiconcf", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap fileiconsaa {
            get {
                object obj = ResourceManager.GetObject("fileiconsaa", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///	Name: &quot;Cowsay Fire Hydrant Cowfile&quot;,
        ///	Description: &quot;Ever been so thirsty that you wanted to open a fire hydrant and just take a giant drink of water? Well, you can&apos;t do that with this install file, but you can at least get a neat cowfile firehydrant so you can make one talk!&quot;,
        ///	SourceType: &quot;CowFile&quot;,
        ///	Source:&quot;fire hydrant\t  \\      !\r\n   \\   .:::.\r\n      ///|\\\\\\\r\n     {=-#-#-=}\r\n    .-||||/..\\\r\n  c[I ||||\\&apos;&apos;/\r\n    &apos;-||||||| \r\n      |||||||\r\n      |||||||\r\n      |||||||\r\n    [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string fire_hydrant_cow_stp {
            get {
                return ResourceManager.GetString("fire_hydrant_cow_stp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* Plex hackables data file
        /// *
        /// * This file contains information about all hackable systems in the game&apos;s campaign.
        /// *
        /// */
        ///
        ///[
        ///	{
        ///		SystemName: &quot;shiftsyndicate_main&quot;,
        ///		FriendlyName: &quot;ShiftSyndicate file server&quot;,
        ///		Password: &quot;h0ldy0urc0l0ur&quot;,
        ///		PasswordHint: &quot;Prepare to hold your colour...&quot;,
        ///		WelcomeMessage: &quot;Don&apos;t make fun of SpamSyndicate web design.&quot;,
        ///		FirewallStrength: 0,
        ///		LootRarity: 1,
        ///		LootAmount: 2,
        ///		ConnectionTimeoutLevel: 4,
        ///		SystemType: &quot;FileServer, SSHServer&quot;,
        ///
        ///	}
        ///].
        /// </summary>
        internal static string Hackables {
            get {
                return ResourceManager.GetString("Hackables", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap justthes {
            get {
                object obj = ResourceManager.GetObject("justthes", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* Plex Loot data file
        /// *
        /// * This file contains information about all loot in the game&apos;s campaign.
        /// *
        /// */
        ///
        ///[
        ///	{
        ///		FriendlyName: &quot;Force Heartbeat&quot;,
        ///		LootName: &quot;sploitset_keepalive.stp&quot;,
        ///		Rarity: 1,
        ///		PointTo: &quot;sploitset_keepalive&quot;,
        ///		ID: &quot;sploitset_keepalive&quot;
        ///	},
        ///	{
        ///		FriendlyName: &quot;Banana Cow&quot;,
        ///		LootName: &quot;banana.cow.stp&quot;,
        ///		Rarity: 1,
        ///		PointTo: &quot;banana_cow_stp&quot;,
        ///	},
        ///	{
        ///		FriendlyName: &quot;Fire Hydrant Cow&quot;,
        ///		LootName: &quot;fire hydrant.cow.stp&quot;,
        ///		Rarity: 1,
        ///		PointTo: &quot;fire_hydrant_c [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LootInfo {
            get {
                return ResourceManager.GetString("LootInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* Plex Payloads data file
        /// *
        /// * This file contains information about all payloads in the game&apos;s campaign.
        /// *
        /// */
        ///
        ///[
        ///	{
        ///		FriendlyName: &quot;FTP File Puller Payload&quot;,
        ///		PayloadName: &quot;ftpull&quot;,
        ///		EffectiveAgainstFirewall: 1,
        ///		EffectiveAgainst: &quot;FileServer&quot;,
        ///		Function: 2
        ///	},
        ///	{
        ///		FriendlyName: &quot;Force Heartbeat&quot;,
        ///		PayloadName: &quot;keepalive&quot;,
        ///		EffectiveAgainstFirewall: 1,
        ///		EffectiveAgainst: &quot;SSHServer&quot;,
        ///		Function: 1,
        ///		Dependencies: &quot;sploitset_keepalive&quot;,
        ///	}
        ///].
        /// </summary>
        internal static string Payloads {
            get {
                return ResourceManager.GetString("Payloads", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///	Name: &quot;Pong&quot;,
        ///	Description: &quot;It&apos;s a game so good we made you play it all the time in Plex 0.0.x, 0.1.x and 1.0. It&apos;s only natural that we&apos;d sleep Pong into the game again somehow, right?&quot;,
        ///	SourceType: &quot;ShiftoriumUpgrade&quot;,
        ///	Source: &quot;pong&quot;
        ///}.
        /// </summary>
        internal static string pong {
            get {
                return ResourceManager.GetString("pong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* Plex Ports data file        /// *        /// * This file contains information about all ports in the game&apos;s campaign.        /// *        /// */        ///        ///[        ///	{        ///		FriendlyName: &quot;SMTP mailserver (unencrypted)&quot;,        ///		AttachTo: &quot;EmailServer&quot;,        ///		Value: 25,        ///		Name: &quot;smtp&quot;,        ///	},        ///	{        ///		FriendlyName: &quot;File Transfer Protocol&quot;,        ///		AttachTo: &quot;FileServer&quot;,        ///		Value: 21,        ///		Name: &quot;ftp&quot;,        ///	},        ///	{        ///		FriendlyName: &quot;ShiftSSH server&quot;,        ///		AttachTo: &quot;SSHServer&quot;,        ///		Value: 22,        ///		Name: &quot;ssh&quot;,        ///	},        ///	{        ///		FriendlyName: &quot;MySQL server&quot;,        ///		AttachTo: &quot;Database&quot;,        ///		Value: 3306,        ///		Name: &quot;sql&quot;,        ///	} [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Ports {
            get {
                return ResourceManager.GetString("Ports", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [
        ///	{
        ///		Name: &quot;sploitset_keepalive&quot;,
        ///		Cost: 1000000000,
        ///		Description: &quot;lolyouarentsupposedtobeabletobuythis&quot;,
        ///		Dependencies: &quot;thisupgradeshouldneverexistever;sploitset_sshardline&quot;,
        ///	},
        ///	{
        ///		Name: &quot;sploitset_sshardline&quot;,
        ///		Cost: 1000000000,
        ///		Description: &quot;lolyouarentsupposedtobeabletobuythis&quot;,
        ///		Dependencies: &quot;thisupgradeshouldneverexistever&quot;,
        ///	},
        ///	{
        ///		Name: &quot;Pong&quot;,
        ///		Cost: 0,
        ///		Dependencies: &quot;pong&quot;,
        ///	}
        ///].
        /// </summary>
        internal static string Shiftorium {
            get {
                return ResourceManager.GetString("Shiftorium", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* Plex setup data file
        /// * 
        /// * This file holds information used by a Plex &quot;Installer&quot; for setting up a system component.
        /// *
        /// */
        ///
        /// {
        ///	Name: &quot;Sploitset Force Heartbeat exploit&quot;,
        ///	Description: &quot;This is an exploit for the sploitset system exploitation utility which causes the remote system to force the connection to stay alive by sending heartbeat requests even after the firewall has timed out the connection. Useful against those pesky connection timers...&quot;,
        ///	SourceType: &quot;ShiftoriumUpgrade&quot;,
        ///	Source:  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string sploitset_keepalive {
            get {
                return ResourceManager.GetString("sploitset_keepalive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {        ///	&quot;{SUBMIT}&quot;:&quot;Bestätigen&quot;,        ///        ///&quot;{TERMINAL_TUTORIAL_1}&quot;:&quot;Wilkommen zum Plex Terminal. Hier wirst du die meiste Zeit in Plex verbringen.        ///          ///Eine kurze Erklärung wie du das Terminal benutzt lautet wiefolgt. Du kannst das command &apos;sos.help&apos; benutzen um eine Liste aller commands aufzurufen. Schreib es        ///einfach in das Terminal und drücke &lt;enter&gt; um alle commands anzuzeigen.        ///         ///Commands können mit argumenten versehen werden, indem du ein key-value Paar in einem {} Block hinter dem command angibst. Zum Beispiel:        ///         ///some [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string strings_de {
            get {
                return ResourceManager.GetString("strings_de", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*        /// * Plex English Language Pack        /// *        /// * This is the default language pack distributed within the game.        /// */        ///        ///{        ///  //General strings        ///  //These strings can be used anywhere in the UI where language context isn&apos;t necessary.        ///  &quot;{GEN_PROGRAMS}&quot;: &quot;Programs&quot;,        ///  &quot;{GEN_COMMANDS}&quot;: &quot;Commands&quot;,        ///  &quot;{GEN_OBJECTIVES}&quot;: &quot;Objectives&quot;,        ///  &quot;{GEN_CURRENTPROCESSES}&quot;: &quot;Current processes&quot;,        ///  &quot;{GEN_WELCOME}&quot;: &quot;Welcome to Plex.&quot;,        ///  &quot;{GEN_SYSTEMNAME}&quot;: &quot;System name&quot;,        ///  &quot;{GEN_PASSWORD}&quot;: &quot;Password&quot;,        ///  &quot;{GEN_LPROMPT}&quot;: &quot;%sysname login: &quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string strings_en {
            get {
                return ResourceManager.GetString("strings_en", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*        /// * Plex French Language Pack        /// *        /// * This is a default language pack distributed within the game.        /// */        ///        ///{        ///  //General strings        ///  //These strings can be used anywhere in the UI where language context isn&apos;t necessary.        ///  &quot;{GEN_PROGRAMS}&quot;: &quot;Les programmes&quot;,        ///  &quot;{GEN_COMMANDS}&quot;: &quot;Les ordres&quot;,        ///  &quot;{GEN_OBJECTIVES}&quot;: &quot;Les objectifs&quot;,        ///  &quot;{GEN_CURRENTPROCESSES}&quot;: &quot;Les procèdures actuelles&quot;,        ///  &quot;{GEN_WELCOME}&quot;: &quot;Bienvenue au Plex.&quot;,        ///  &quot;{GEN_SYSTEMNAME}&quot;: &quot;Nom de système&quot;,        ///  &quot;{GEN_PASSWORD}&quot;: &quot;Mot de passe&quot;,        ///  &quot;{GEN_LPROM [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string strings_fr {
            get {
                return ResourceManager.GetString("strings_fr", resourceCulture);
            }
        }
    }
}
